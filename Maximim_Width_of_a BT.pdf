Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes),
where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer.

Example 1:

Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).

Example 2:

Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).

Example 3:

Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).
 
Constraints:

The number of nodes in the tree is in the range [1, 3000].
-100 <= Node.val <= 100

----------------------------------------------------------------CODE--------------------------------------------------------------------------------------------------


import java.util.LinkedList;
import java.util.Queue;

public class TreeNode {
    int val;
    TreeNode left, right;

    public TreeNode(int val) {
        this.val = val;
    }
}

public class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if (root == null) {
            return 0;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> position = new LinkedList<>();
        queue.offer(root);
        position.offer(1); // Root position

        int maxWidth = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            int leftmost = 0;
            int rightmost = 0;

            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                int pos = position.poll();

                if (i == 0) {
                    leftmost = pos;
                }

                if (i == size - 1) {
                    rightmost = pos;
                }

                if (node.left != null) {
                    queue.offer(node.left);
                    position.offer(pos * 2);
                }

                if (node.right != null) {
                    queue.offer(node.right);
                    position.offer(pos * 2 + 1);
                }
            }

            int width = rightmost - leftmost + 1;
            maxWidth = Math.max(maxWidth, width);
        }

        return maxWidth;
    }
}
