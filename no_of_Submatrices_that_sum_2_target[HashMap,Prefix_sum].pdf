Given a matrix and a target, return the number of non-empty submatrices that sum to target.

A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.

Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

Example 1:

Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.

Example 2:

Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.

Example 3:

Input: matrix = [[904]], target = 0
Output: 0

Constraints:

1 <= matrix.length <= 100
1 <= matrix[0].length <= 100
-1000 <= matrix[i] <= 1000
-10^8 <= target <= 10^8
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length, res = 0;
        for (int i = 0; i < m; i++) {
            int[] col = new int[n];
            for (int j = i; j < m; j++) {
                for (int k = 0; k < n; k++) {
                    col[k] += matrix[j][k];
                }
                res += helper(col, target);
            }
        }
        return res;
    }

    private int helper(int[] num, int target) {
        Map<Integer, Integer> subMatrix = new HashMap<>();
        subMatrix.put(0, 1);
        int sum = 0, count = 0;
        for (int n : num) {
            sum += n;
            count += subMatrix.getOrDefault(sum - target, 0);
            subMatrix.merge(sum, 1, Integer::sum);
        }
        return count;
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
use std::collections::HashMap;
impl Solution {
    pub fn num_submatrix_sum_target(matrix: Vec<Vec<i32>>, target: i32) -> i32 {
        let m = matrix.len();
        let n = matrix[0].len();
        let mut res = 0;
        for i in 0..m {
            let mut col = vec![0; n];
            for j in i..m {
                for k in 0..n {
                    col[k] += matrix[j][k];
                }
            res += Self::helper(&col, target);
            }
        }
        res
    }
    fn helper(num: &[i32], target: i32) -> i32 {
        let mut sub_matrix = HashMap::new();
        sub_matrix.insert(0, 1);
        let mut sum = 0;
        let mut count = 0;
        for &n in num {
            sum += n;
            count += *sub_matrix.get(&(sum - target)).unwrap_or(&0);
            *sub_matrix.entry(sum).or_insert(0) += 1;
        }
        count
    }
}
