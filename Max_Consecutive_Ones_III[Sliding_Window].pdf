Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length

--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
class Solution {
    public int longestOnes(int[] nums, int k) {
        int left = 0; // left pointer of the window
        int right = 0; // right pointer of the window
        int countZeros = 0; // count of zeros in the current window
        int maxLen = 0; // maximum length of subarray containing only 1's
        while (right < nums.length) {
            if (nums[right] == 0) {
                countZeros++;
            }
            while (countZeros > k) { // Shrink the window if the number of zeros exceeds 1
                if (nums[left] == 0) {
                    countZeros--;
                }
                left++;
            }
            maxLen = Math.max(maxLen, right - left + 1);// Update the maximum length
            right++;// Move the right pointer to the next element
        }
        return maxLen;
    }
}

--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
impl Solution {
    pub fn longest_ones(nums: Vec<i32>, k: i32) -> i32 {
        let mut right = 0;
        let mut left = 0;
        let mut count_zeroes = 0;
        let mut max_len = 0;
        while right < nums.len() {
            if nums[right] == 0 {
                count_zeroes += 1;
            }
            while count_zeroes > k {
                if nums[left] == 0 {
                    count_zeroes -= 1;
                }
                left += 1;
            }
            max_len = max_len.max(right - left + 1);
            right += 1;
        }
        max_len as i32
    }
}
