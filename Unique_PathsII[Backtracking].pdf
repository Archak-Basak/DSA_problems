You are given an m x n integer array grid where grid[i][j] could be:
1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

Example 1:

Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths:
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)

Example 2:

Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths:
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)

Example 3:

Input: grid = [[0,1],[2,0]]
Output: 0
Explanation: There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 20
1 <= m * n <= 20
-1 <= grid[i][j] <= 2
There is exactly one starting cell and one ending cell.
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
class Solution {
    public int uniquePathsIII(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] start = new int[2];
        int count = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n ; j++) {
                if(grid[i][j] == 1) {
                    start[0] = i;
                    start[1] = j;
                } else if(grid[i][j] == 0) {
                    count++;
                }
            }
        }
        return baktrak(grid, start[0], start[1], count + 1);
    }
    private int baktrak(int[][] grid, int i, int j, int count) {
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[i].length || grid[i][j] == -1)
            return 0;
        if(grid[i][j] == 2) {
            if(count == 0)
                return 1;
            return 0;
        }
        grid[i][j] = -1;
        int reset = 0;
        reset += baktrak(grid, i + 1, j, count - 1);
        reset += baktrak(grid, i - 1, j, count - 1);
        reset += baktrak(grid, i, j + 1, count - 1);
        reset += baktrak(grid, i, j - 1, count - 1);
        grid[i][j] = 0;
        return reset;
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
impl Solution {
    pub fn unique_paths_iii(grid: Vec<Vec<i32>>) -> i32 {
        let m = grid.len();
        let n = grid[0].len();
        let mut start = vec![0, 0];
        let mut count = 0;
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    start[0] = i;
                    start[1] = j;
                } else if grid[i][j] == 0 {
                    count += 1;
                }
            }
        }
        Self::baktrak(&grid, start[0], start[1], count + 1)
    }
    fn baktrak(grid: &Vec<Vec<i32>>, i:usize, j:usize, count:i32) -> i32 {
        if i < 0 || j < 0 || i >= grid.len() || j >= grid[0].len() || grid[i][j] == -1 {
            return 0;
        }
        if grid[i][j] == 2 {
            if count == 0 {
                return 1;
            }
            return 0;
        }
        let mut grid = grid.clone();
        grid[i][j] = -1;
        let mut reset = 0;
        reset += Self::baktrak(&grid, i + 1, j, count - 1);
        reset += Self::baktrak(&grid, i - 1, j, count - 1);
        reset += Self::baktrak(&grid, i, j + 1, count - 1);
        reset += Self::baktrak(&grid, i, j - 1, count - 1);
        grid[i][j] = 0;
        reset
    }
}
