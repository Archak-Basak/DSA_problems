Write a program to solve a Sudoku puzzle by filling the empty cells.
A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

Example 1:

Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
Explanation: The input board is shown above and the only valid solution is shown below:

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.

--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class Solution {
    public void solveSudoku(char[][] board) {

        if(board == null || board.length == 0 || board[0].length == 0) {
            return;
        }
    solve(board);
    }
    private boolean solve(char[][] board) {

        for (int row = 0; row < board.length; row++) {

            for (int col = 0; col < board[0].length; col++) {

                if (board[row][col] == '.') {

                    for (char num = '1'; num <= '9'; num++) {

                        if (isValid(board, row, col, num)) {

                            board[row][col] = num;

                            if (solve(board)) {
                                return true; // If the current configuration leads to a solution
                            }

                            board[row][col] = '.'; // Backtrack
                        }
                    }
                    return false; // No valid number found for this cell
                }
            }
        }
        return true; // All cells filled, puzzle solved
    }
    private boolean isValid(char[][] board, int row, int col, char num) {
        // Check if 'num' is not in the current row and column
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == num || board[i][col] == num) {
                return false;
            }
        }

        // Check if 'num' is not in the 3x3 subgrid
        int startRow = 3 * (row / 3);
        int startCol = 3 * (col / 3);
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[startRow + i][startCol + j] == num) {
                    return false;
                }
            }
        }

        return true;
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
impl Solution {
    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {
        if board.is_empty() || board.len() == 0 || board[0].len() == 0 {
            return;
        }
        Self::solve(board);
    }
    fn solve(board: &mut Vec<Vec<char>>) -> bool {
        for row in 0..board.len() {
            for col in 0..board[0].len() {
                if board[row][col] == '.' {
                    for num in '1'..='9' {
                        if Self::is_valid(&board, row, col, num) {
                            board[row][col] = num;
                            if Self::solve(board) {
                                return true; // If the current configuration leads to a solution
                            }
                        board[row][col] = '.'; // Backtrack
                        }
                    }
                    return false;  // No valid number found for this cell
                }
            }
        }
        true  // All cells filled, puzzle solved
    }
    fn is_valid(board: &Vec<Vec<char>>, row: usize, col: usize, num: char) -> bool {
        // Check if 'num' is not in the current row and column
        for i in 0..9 {
            if board[row][i] == num && i != col {
                return false;
            }
            if board[i][col] == num && i != row {
                return false;
            }
        }
        // Check if 'num' is not in the 3x3 subgrid
        let mut start_row = 3 * (row / 3);
        let mut start_col = 3 * (col / 3);
        for i in 0..3 {
            for j in 0..3 {
                if board[start_row + i][start_col + j] == num && (start_row + i) != row && (start_col + j) != col {
                    return false;
                }
            }
        }
        true
    }
}
