Given the root of a binary tree, return the leftmost value in the last row of the tree.

Example 1:
Input: root = [2,1,3]
Output: 1

Example 2:
Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        if(root == null)
            return 0;
        TreeMap<Integer, Integer> depthMap = new TreeMap<>();
        populateSib(root, depthMap, 1);
        Integer last = depthMap.lastKey();
        return depthMap.get(last);
    }
    private void populateSib(TreeNode root, TreeMap<Integer, Integer> depthMap, int depth) {
        if(root == null)
            return;
        depthMap.computeIfAbsent(depth, x -> root.val);
        populateSib(root.left, depthMap, depth + 1);
        populateSib(root.right, depthMap, depth + 1);
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
// Definition for a binary tree node.
// #[derive(Debug, PartialEq, Eq)]
// pub struct TreeNode {
//   pub val: i32,
//   pub left: Option<Rc<RefCell<TreeNode>>>,
//   pub right: Option<Rc<RefCell<TreeNode>>>,
// }
//
// impl TreeNode {
//   #[inline]
//   pub fn new(val: i32) -> Self {
//     TreeNode {
//       val,
//       left: None,
//       right: None
//     }
//   }
// }
use std::rc::Rc;
use std::cell::RefCell;
use std::collections::BTreeMap;
impl Solution {
    pub fn find_bottom_left_value(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        let mut depth_map = BTreeMap::new();
        Solution::populate_sib(&root, &mut depth_map, 1);
        if let Some((&last_depth, &last_val)) = depth_map.iter().last() {
            last_val
        } else {
            0
        }
    }
    fn populate_sib(root: &Option<Rc<RefCell<TreeNode>>>, depth_map: &mut BTreeMap<i32, i32>, depth: i32) {
        if let Some(node) = root {
            let node = node.borrow();
                depth_map.entry(depth).or_insert(node.val);
                Solution::populate_sib(&node.left, depth_map, depth + 1);
                Solution::populate_sib(&node.right, depth_map, depth + 1);
        }
    }
}
