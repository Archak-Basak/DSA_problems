Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.

Notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc".

Example 1:

Input: a = "abcd", b = "cdabcdab"
Output: 3
Explanation: We return 3 because by repeating a three times "abcdabcdabcd", b is a substring of it.
Example 2:

Input: a = "a", b = "aa"
Output: 2


Constraints:

1 <= a.length, b.length <= 104
a and b consist of lowercase English letters.

Code:


import java.util.*;

class RepeatedStringMatch {
    public int repeatedStringMatch(String a, String b) {
        int gcd = gcd(a.length(), b.length());
        int repeat = Math.max(b.length() / gcd, 1);

        StringBuilder repeatedStr = new StringBuilder();

        for(int i = 0; i < b.length() / gcd; i++) {

            repeatedStr.append(a);
        }
        if(repeatedStr.toString().contains(b)) {

            return repeat;

        } else if(repeatedStr.append(a).toString().contains(b)) {

            return repeat + 1;

        } else {

            return -1;
        }
    }
    private static int gcd(int a, int b) {
        if(b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
     public static void main(String[] args) {
        Scanner ab = new Scanner(System.in);

        String str = ab.next();
        String st2 = ab.next();

        int res = repeatedStringMatch(str, str2);

        System.out.println(res);
        }
}
