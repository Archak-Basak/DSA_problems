You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.

Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.

Return a list of integers representing the size of these parts.

 

Example 1:

Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.
Example 2:

Input: s = "eccbbbbdec"
Output: [10]
 

Constraints:

1 <= s.length <= 500
s consists of lowercase English letters.


-------------------------------------------------------------LOGIC / APPROACH-------------------------------------------------------

To solve this problem, you can use a "Two-Pass" algorithm. In the first pass, record the last occurrence of each character in the string.
In the second pass, iterate through the string and keep track of the maximum last occurrence for the current partition. 
When you reach the maximum last occurrence for the current partition, you know that you have found a partition.


-------------------------------------------------------------CODE-------------------------------------------------------


class Solution {
    public List<Integer> partitionLabels(String s) {
        
        List<Integer> res = new ArrayList<>();
        
        int[] lastOccurrence = new int[26]; //Store last occurrence of each character

        for(int i = 0; i < s.length(); i++) {
            
            lastOccurrence[s.charAt(i) - 'a'] = i;
        }
        
        int start = 0, end = 0;// Starting & Ending index of the current position
        
        
        for(int i = 0; i < s.length(); i++) {
            
            end = Math.max(end, lastOccurrence[s.charAt(i) - 'a']);
            
            if(i == end) { // current index == end index, then partition is reached
                
                res.add(end - start + 1);
                
                start = end + 1;
            }
        }
        
        return res;
    }
}