Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.


Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true

Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false

Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.


-----------------------------------------------------------------------------------------CODE--------------------------------------------------------------------
import java.util.*;

class Solution {
    public boolean wordPattern(String pattern, String s) {
        
        String[] word = s.trim().split("\\s+");

        if(pattern.length() != word.length) {

            return false;
        }

        Map<Character, String> wordPattern = new HashMap<>();
        Map<String, Character> charPattern = new HashMap<>();

        for(int i = 0; i < pattern.length(); i++) {

            char currentChar = pattern.charAt(i);
            String currentWord = word[i];

            if(wordPattern.containsKey(currentChar)) {

                    if(!wordPattern.get(currentChar).equals(currentWord)) {

                        return false;
                    }
            } else {

            wordPattern.put(currentChar, currentWord);

            }

            if(charPattern.containsKey(currentWord)) {

                if(!charPattern.get(currentWord).equals(currentChar)) {

                    return false;
                }
            } else {

                charPattern.put(currentWord, currentChar);
            }
        }
        return true;
    }    
}