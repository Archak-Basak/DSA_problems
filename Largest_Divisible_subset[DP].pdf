Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:
answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.

Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        Arrays.sort(nums);
        List<Integer> div_subset = new ArrayList<>();
        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);
        int max_idx = 0;
        for(int i = 1; i < nums.length; i++) {
            for(int j = 0; j < i; j++) {
                if(nums[i] % nums[j] == 0) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            if(dp[i] > dp[max_idx]) {
                max_idx = i;
            }
        }
        int max_size = dp[max_idx];
        int num = nums[max_idx];
        for(int i = max_idx; i >= 0; i--) {
            if(num % nums[i] == 0 && dp[i] == max_size) {
                div_subset.add(nums[i]);
                num = nums[i];
                max_size--;
            }
        }
        Collections.reverse(div_subset);
        return div_subset;
    }
}
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
impl Solution {
    pub fn largest_divisible_subset(mut nums: Vec<i32>) -> Vec<i32> {
        nums.sort_unstable();
        let mut div_subset = Vec::new();
        let mut dp = vec![1; nums.len()];
        let mut max_idx = 0;
        for i in 1..nums.len() {
            for j in 0..i {
                if nums[i] % nums[j] == 0 {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
            if dp[i] > dp[max_idx] {
                max_idx = i;
            }
        }
        let mut max_size = dp[max_idx];
        let mut num = nums[max_idx];
        for i in (0..=max_idx).rev() {
            if num % nums[i] == 0 && dp[i] == max_size {
                div_subset.push(nums[i]);
                num = nums[i];
                max_size -= 1;
            }
        }
        div_subset.reverse();
        div_subset
    }
}
