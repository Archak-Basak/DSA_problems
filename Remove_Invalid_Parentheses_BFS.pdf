Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.

Example 1:

Input: s = "()())()"
Output: ["(())()","()()()"]

Example 2:

Input: s = "(a)())()"
Output: ["(a())()","(a)()()"]

Example 3:

Input: s = ")("
Output: [""]
 
Constraints:

1 <= s.length <= 25
s consists of lowercase English letters and parentheses '(' and ')'.
There will be at most 20 parentheses in s.

-----------------------------------------------------------------------------------------CODE--------------------------------------------------------------------
import java.util.*;

class Solution {
    public List<String> removeInvalidParentheses(String s) {
        
        List<String> res = new ArrayList<>();
        
        if(s == null) {
            
            return res;
            
        }
        Set<String> visited = new HashSet<>();
        
        Queue<String> q = new LinkedList<>();
        
        q.offer(s);
        visited.add(s);
        
        boolean found = false;
        
        while(!q.isEmpty()) {
            
            String current = q.poll();    
        
        
            if(isValid(current)) {
            
                res.add(current);
            
                found = true;
            }
        
            if(found) {
            
                continue;
            }
        
            for(int i = 0; i < current.length(); i++) {
            
                if(current.charAt(i) == '(' || current.charAt(i) == ')') {
                
                    String next = current.substring(0, i) + current.substring(i + 1);
                
                    if(!visited.contains(next)) {
                    
                        q.offer(next);
                    
                        visited.add(next);
                    }
                }
            }
        }
        return res;
        
    }
    
    private boolean isValid(String s) {
        
        int count = 0;
        
        for(char ch :s.toCharArray()) {
            
            if(ch == '(') {
                
                count++;
                
            } else if(ch == ')') {
                
                count--;
                
                if(count < 0) {
                    
                    return false;
                }
            }
        }
        return count == 0;
    }
}
