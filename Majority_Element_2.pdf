Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Example 1:

Input: nums = [3,2,3]
Output: [3]

Example 2:

Input: nums = [1]
Output: [1]

Example 3:

Input: nums = [1,2]
Output: [1,2]
 
Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109


-----------------------------------------------------------------------------------------CODE--------------------------------------------------------------------
import java.util.*;

class Solution {
    public List<Integer> majorityElement(int[] nums) { // Boyce-Moore Voting Algorithm
        
        List<Integer> res = new ArrayList<>();
        
        int can1 = 0, can2 = 0, count1 = 0, count2 = 0;
        
        for(int num : nums) {
            
            if(num == can1) {
                
                count1++;
                
            } else if(num == can2) {
                
                count2++;
                
            } else if(count1 == 0) {
                
                can1 = num;
                
                count1 = 1;
                
            } else if(count2 == 0) {
                
                can2 = num;
                
                count2 = 1;
                
            } else {
                
                count1--;

                count2--;
                
            }
        }
        count1 = 0; count2 = 0;
        
        for(int num : nums) {
            
            if(num == can1) {
                
                count1++;
                
            } else if(num == can2) {
                
                count2++;
                
            }
        }
        
        if(count1 > (nums.length / 3)) {
            
            res.add(can1);
            
        } 
        if(count2 > (nums.length / 3) && can1 != can2) {
            
            res.add(can2);
        }
        
        return res;
        
    }
}
