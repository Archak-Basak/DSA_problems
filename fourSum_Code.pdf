
Find All Four Sum Numbers
MediumAccuracy: 19.94%Submissions: 181K+Points: 4
Join the most popular course on DSA. Master Skills & Become Employable by enrolling today!

banner
Given an array A of integers and another number K. Find all the unique quadruple from the given array that sums up to K.

Also note that all the quadruples which you return should be internally sorted, ie for any quadruple [q1, q2, q3, q4] the following should follow: q1 <= q2 <= q3 <= q4.

Example 1:

Input:
N = 5, K = 3
A[] = {0,0,2,1,1}
Output: 0 0 1 2
Explanation: Sum of 0, 0, 1, 2 is equal
to K.
Example 2:

Input:
N = 7, K = 23
A[] = {10,2,3,4,5,7,8}
Output: 2 3 8 10
        2 4 7 10
        3 5 7 8
Explanation: Sum of 2, 3, 8, 10 = 23,
sum of 2, 4, 7, 10 = 23 and sum of 3,
5, 7, 8 = 23.
Your Task:
You don't need to read input or print anything. Your task is to complete the function fourSum() which takes the array arr[] and the integer k as its input and returns an array containing all the quadruples in a lexicographical manner. In the output each quadruple is separate by $. The printing is done by the driver's code.

Expected Time Complexity: O(N3).
Expected Auxiliary Space: O(N2).

Constraints:
1 <= N <= 100
-1000 <= K <= 1000
-100 <= A[] <= 100

Company Tags
AmazonMicrosoftOYO RoomsAdobeGoogle
Topic Tags
HashSortingData StructuresAlgorithms
Related Courses
Complete Test Series for Product-Based Companies

CODE:

//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine().trim());

        while (tc-- > 0) {
            String[] nk = br.readLine().trim().split(" ");
            int n = Integer.parseInt(nk[0]);
            int k = Integer.parseInt(nk[1]);

            String[] str = br.readLine().trim().split(" ");
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(str[i]);
            }

            Solution sln = new Solution();
            ArrayList<ArrayList<Integer>> ans = sln.fourSum(a, k);
            for (ArrayList<Integer> v : ans) {
                for (int u : v) {
                    System.out.print(u + " ");
                }
                System.out.print("$");
            }
            if (ans.isEmpty()) {
                System.out.print(-1);
            }
            System.out.println();
        }
    }
}
// } Driver Code Ends


// User function Template for Java

// arr[] : int input array of integers
// k : the quadruple sum required

class Solution {
    public ArrayList<ArrayList<Integer>> fourSum(int[] arr, int k) {
        // code here
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();

        if(arr == null || arr.length < 4) {

            return result;
        }

        Arrays.sort(arr);

        for(int i = 0; i < arr.length - 3; i++) {

            if(i > 0 && arr[i] == arr[i - 1]) {

                continue;//Skip duplicates
            }

            for(int j = i + 1; j < arr.length - 2; j++) {

                if(j > i + 1 && arr[j] == arr[j - 1]) {

                    continue;//Skip duplicates
                }

                int left = j + 1;

                int right = arr.length - 1;

                while(left < right) {

                    int sum = arr[i] + arr[j] + arr[left] + arr[right];

                    if(sum == k) {

                       ArrayList<Integer> quadruple = new ArrayList<>();
                        quadruple.add(arr[i]);
                        quadruple.add(arr[j]);
                        quadruple.add(arr[left]);
                        quadruple.add(arr[right]);
                        result.add(quadruple);

                        //Move left & right pointers while skipping duplicates
                        while(left < right && arr[left] == arr[left + 1]) {

                            left++;
                        }

                        while(left < right && arr[right] == arr[right - 1]) {

                            right--;
                        }
                        left++;

                        right--;

                    } else if(sum < k) {

                        left++;
                    } else {

                        right--;
                    }

                }

            }
        }

        return result;
    }
}
