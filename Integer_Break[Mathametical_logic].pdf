Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.

Return the maximum product you can get.

Example 1:

Input: n = 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.

Example 2:

Input: n = 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.

Constraints:

2 <= n <= 58

--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class Solution {
    public int integerBreak(int n) {
        if(n <= 3)
            return n - 1;
        int product = 1;
        while(n > 4) {  // Break n into factors of 3 as long as n is greater than 4.
            product *= 3;
            product *= 3;
            n -= 3;
        }
        return product * n;
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-----=-=-
impl Solution {
    pub fn integer_break(mut n: i32) -> i32 {
        if n <= 3 {
            return n - 1;
        }
        let mut product = 1;
        while n > 4 {        // Break n into factors of 3 as long as n is greater than 4.
            product *= 3;
            product *= 3;
            n -= 3;
        }
        product * n
    }
}
