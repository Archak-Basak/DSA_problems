You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class Solution {
    public int maxProfit(int[] prices) {
        int res =  0, minimumSoFar = prices[0];
        for(int i = 0; i < prices.length; i++) {
            int currentProfit = prices[i] - minimumSoFar;
            if(currentProfit > res) {
                res = currentProfit;
            }
            minimumSoFar = Math.min(minimumSoFar, prices[i]);
        }
        return res;
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-----=-=-
impl Solution {
    pub fn max_profit(mut prices: Vec<i32>) -> i32 {
        if prices.is_empty() {
            return 0;
        }
        let (mut res,mut minimum_so_far) = (0, prices[0]);
        for i in prices.iter() {
            let mut current_profit = i - minimum_so_far;
            if current_profit > res {
                res = current_profit;
            }
            minimum_so_far = minimum_so_far.min(*i);
        }
        res
    }
}
