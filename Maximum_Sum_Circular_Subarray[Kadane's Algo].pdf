Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.
A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].
A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.
Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

Example 2:

Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

Example 3:

Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.

Constraints:

n == nums.length
1 <= n <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class Solution {
    public int maxSubarraySumCircular(int[] nums) {
        int totalSum = 0, currentMax = 0, currentMin = 0;
        int finalMax = Integer.MIN_VALUE, finalMin = Integer.MAX_VALUE;
        for(int n : nums) // Summing all values
            totalSum += n;
        for(int n : nums) { // Kadane's algo for find max & min values
            currentMax = Math.max(n, currentMax + n);
            finalMax = Math.max(finalMax, currentMax);

            currentMin = Math.min(n, currentMin + n);
            finalMin = Math.min(finalMin, currentMin);
        }
        if(finalMax > 0) //If finalMax is non -ve
            return Math.max(finalMax, totalSum - finalMin);
        else // If finalMax is -ve
            return finalMax;
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-----=-=-
impl Solution {
    pub fn max_subarray_sum_circular(nums: Vec<i32>) -> i32 {
        let (mut total_sum, mut current_max, mut current_min) = (0, 0, 0);
        let (mut final_max, mut final_min) = (i32::MIN, i32::MAX);
        for &n in &nums { // Summing all values
            total_sum += n;
        }
        for &n in &nums { // Kadane's algo for find max & min values
            current_max = n.max(current_max + n);
            final_max = final_max.max(current_max);

            current_min = n.min(current_min + n);
            final_min = final_min.min(current_min);
        }
        if final_max > 0 { //If finalMax is non -ve
            return final_max.max(total_sum - final_min);
        } else { //If finalMax is -ve
            return final_max;
        }
    }
}
