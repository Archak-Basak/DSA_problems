We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].

You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time X you will be able to start another job that starts at time X.

Example 1:

Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job.
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.

Example 2:

Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job.
Profit obtained 150 = 20 + 70 + 60.
Example 3:

Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6

Constraints:

1 <= startTime.length == endTime.length == profit.length <= 5 * 104
1 <= startTime[i] < endTime[i] <= 109
1 <= profit[i] <= 104

---------------------------------------------------------------CODE-------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int st = startTime.length;
        int[][] jobs = new int[st][3];

        for(int i = 0; i < st; i++) {
            jobs[i] = new int[]{startTime[i], endTime[i], profit[i]};
        }

        Arrays.sort(jobs, (a, b) -> a[1] - b[1]);

        int[] dp = new int[st];
        dp[0] = jobs[0][2];

        for(int i = 1; i < st; i++) {

            int curProfit = jobs[i][2];
            int lastNonOverlap = findLastNonOverlap(jobs, i);

            if(lastNonOverlap != -1) {
                curProfit += dp[lastNonOverlap];
            }
            dp[i] = Math.max(dp[i - 1], curProfit);
        }
        return dp[st - 1];
    }
    private int findLastNonOverlap(int[][] jobs, int curIdx) {
        for(int i = curIdx - 1; i >= 0; i--) {
            if(jobs[i][1] <= jobs[curIdx][0]) {
                return i;
            }
        }
        return -1;
    }
}

--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
use core::cmp;
impl Solution {
    pub fn job_scheduling(start_time: Vec<i32>, end_time: Vec<i32>, profit: Vec<i32>) -> i32 {
        let st = start_time.len();
        let mut jobs: Vec<Vec<i32>> = Vec::with_capacity(st);

        for i in 0..st {
            jobs.push(vec![start_time[i], end_time[i], profit[i]]);
        }

        jobs.sort_by(|a, b| a[1].cmp(&b[1]));

        let mut dp: Vec<i32> = vec![0; st];
        dp[0] = jobs[0][2];

        for i in 1..st {
            let cur_profit = jobs[i][2];
            let last_non_overlap = Self::find_last_non_overlap(&jobs, i);

            if last_non_overlap != -1 {
                dp[i] = cmp::max(dp[i - 1], cur_profit + dp[last_non_overlap as usize]);
            } else {
                dp[i] = cmp::max(dp[i - 1], cur_profit);
            }
        }
        dp[st - 1]
    }
    fn find_last_non_overlap(jobs: &Vec<Vec<i32>>, cur_idx: usize) -> i32 {
        for i in (0..cur_idx).rev() {
            if jobs[i][1] <= jobs[cur_idx][0] {
                return i as i32;
            }
        }
        -1
    }
}
