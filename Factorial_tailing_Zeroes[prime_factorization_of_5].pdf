Given an integer n, return the number of trailing zeroes in n!.
Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.

Example 1:

Input: n = 3
Output: 0
Explanation: 3! = 6, no trailing zero.
Example 2:

Input: n = 5
Output: 1
Explanation: 5! = 120, one trailing zero.
Example 3:

Input: n = 0
Output: 0
 
Constraints:

0 <= n <= 104

-----------------------------------------------------------------------------------------CODE--------------------------------------------------------------------
import java.util.*;

//Special logic

class Solution {
    public int trailingZeroes(int n) {
        
        int count = 0;
        while(n > 0) {

            n /= 5;
            count += n;
        }
        return count;
    }
}

//Normal Logic

        /*int tZeros = fact(n);
        int count = 0;

        while(tZeros != 0) {

            int r = tZeros % 10;

            if(r == 0) {

                count++;
            }
            tZeros /= 10;
        }

        return count;
    }
    private int fact(int m) {

         int fact = 1;

        for(int i = 1; i <= m; i++) {

            fact *= i;
        }
        return fact;*/
