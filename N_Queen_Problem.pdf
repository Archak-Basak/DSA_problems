--------------------------------------N Queen Problem--------------------------
NQueens
Problem Description
The N-queens puzzle is the problem of placing N queens on an NÃ—N chessboard such that no two queens attack each other.

Given an integer A denoting the value of N, return all distinct solutions to the N-queens puzzle.

Each solution contains a distinct board configuration of the N-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

The final list should be generated in such a way that the indices of the queens in each list should be in reverse lexicographical order.

Problem Constraints
1 <= A <= 10

Input Format
First argument is an integer A denoting the size of chessboard

Output Format
Return an array consisting of all distinct solutions in which each element is a 2d char array representing a unique solution.

Example Input
Input 1:

A = 4
Input 2:

A = 1


Example Output
Output 1:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Output 1:

[
 [Q]
]


Example Explanation
Explanation 1:

There exist only two distinct solutions to the 4-queens puzzle:
Explanation 1:

There exist only one distinct solutions to the 1-queens puzzle:

----------------------------------------------------CODE---------------------------------------------------------------

import java.util.ArrayList;

public class NQueens {

    public ArrayList<ArrayList<String>> solveNQueens(int n) {
        ArrayList<ArrayList<String>> result = new ArrayList<>();
        int[] queens = new int[n];
        solveNQueensUtil(0, n, queens, result);
        return result;
    }

    private void solveNQueensUtil(int row, int n, int[] queens, ArrayList<ArrayList<String>> result) {
        if (row == n) {
            result.add(generateBoard(queens));
            return;
        }

        for (int col = 0; col < n; col++) {
            if (isValid(row, col, queens)) {
                queens[row] = col;
                solveNQueensUtil(row + 1, n, queens, result);
            }
        }
    }

    private boolean isValid(int row, int col, int[] queens) {
        for (int i = 0; i < row; i++) {
            if (queens[i] == col || queens[i] - i == col - row || queens[i] + i == col + row) {
                return false;
            }
        }
        return true;
    }

    private ArrayList<String> generateBoard(int[] queens) {
        ArrayList<String> board = new ArrayList<>();
        for (int row = 0; row < queens.length; row++) {
            StringBuilder sb = new StringBuilder();
            for (int col = 0; col < queens.length; col++) {
                sb.append(queens[row] == col ? 'Q' : '.');
            }
            board.add(sb.toString());
        }
        return board;
    }

    public static void main(String[] args) {
        NQueens nQueens = new NQueens();
        int n = 4; // Change this to the desired board size
        ArrayList<ArrayList<String>> solutions = nQueens.solveNQueens(n);

        // Print the solutions
        for (ArrayList<String> solution : solutions) {
            System.out.println(solution);
        }
    }
}