Problem Statement
You're given a string 'S' consisting of "{","}","(",")","[" & "]"
Return true if the given string 'S is balanced, else return false.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
[()]{}{[()()]()}
Sample Output 1 :
Balanced
Explanation Of The Sample Input 1 :
There is always an opening brace before a closing brace i.e. '{' before '}', '(' before '), '[' before ']'.
So the 'S' is Balanced.
Sample Input 2 :
[[}[
Sample Output 2 :
Not Balanced
Constraints:
1 <= 'N' <= 10^5

Where 'N' is the length of the input string 'S'.
Time Limit: 1 sec


---------------------------------------------------------------CODE-------------------------------------------------------
Code:

import java.util.*;
import java.util.Stack;
public class Valid_Parenthesis {
    public static boolean isValidParenthesis(String s) {
        // Write your code here.

        Stack<Character> st = new Stack<>();
        for(char ch : s.toCharArray()) {

            if(ch == '(' || ch == '{' || ch == '[') {

                st.push(ch);
            } else if(ch == ')' && !st.isEmpty() && st.peek() =='(') {

                st.pop();
            } else if(ch == '}' && !st.isEmpty() && st.peek() =='{') {

                st.pop();
            } else if(ch == ']' && !st.isEmpty() && st.peek() =='[') {

                st.pop();
            } else {
                return false;
            }
        }
        return st.isEmpty();
    }
    public static void main(String[] args) {
        Scanner ab = new Scanner(System.in);
        String str;
        str = ab.next();

        if(isValidParenthesis(str)) {

            System.out.println("Balanced");
        } else {
            System.out.println("Not Balanced");
        }

    }
}
