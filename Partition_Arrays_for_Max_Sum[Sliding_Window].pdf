Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.
Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.

Example 1:

Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]

Example 2:

Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83
Example 3:

Input: arr = [1], k = 1
Output: 1

Constraints:

1 <= arr.length <= 500
0 <= arr[i] <= 109
1 <= k <= arr.length
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int[] res = new int[arr.length];
        int left = 0;
        while (left < arr.length) {
            int currentMax = 0;
            int finalMax = Integer.MIN_VALUE;
            int right = left;
            while (right >= 0 && left - right < k) {
                currentMax = Math.max(currentMax, arr[right]);
                finalMax = Math.max(finalMax, currentMax);
                int prevSum = (right > 0) ? res[right - 1] : 0;
                res[left] = Math.max(res[left], prevSum + finalMax * (left - right + 1));
                right--;
            }
            leftt++;
        }
        return res[arr.length - 1];
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-----=-=-
use std::cmp;
impl Solution {
    pub fn max_sum_after_partitioning(arr: Vec<i32>, k: i32) -> i32 {
        let mut res = vec![0; arr.len()];
        let mut left = 0;
        while left < arr.len() {
            let mut current_max = 0;
            let mut final_max = i32::MIN;
            let mut right = left as i32;
            while right >= 0 && left as i32 - right < k {
                current_max = cmp::max(current_max, arr[right as usize]);
                final_max = cmp::max(final_max, current_max);
                let prev_sum = if right > 0 { res[(right - 1) as usize] } else { 0 };
                res[left] = cmp::max(res[left], prev_sum + final_max * (left as i32 - right + 1));
                right -= 1;
            }
            left += 1;
        }
        res[arr.len() - 1]
    }
}




