Given an integer n, return the least number of perfect square numbers that sum to n.
A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

Example 1:

Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.

Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.

Constraints:

1 <= n <= 104
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class Solution {
    public int numSquares(int n) {
       int new_n = (int) Math.sqrt(n);
       int[] dp = new int[n + 1];
       Arrays.fill(dp, 1 << 30);
       dp[0] = 0;
       for(int i = 1; i <= new_n; i++) {
            for(int j = i * i; j <= n; j++) {
                dp[j] = Math.min(dp[j], dp[j - (i * i) ] + 1);
            }
       }
       return dp[n];
    }
}
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
impl Solution {
    pub fn num_squares(n: i32) -> i32 {
        let new_n = (n as f64).sqrt() as i32;
        let mut dp = vec![i32::MAX; (n + 1) as usize];
        dp[0] = 0;
        for i in 1..=new_n {
            let sq = i * i;
            for j in sq..=n {
                dp[j as usize] = dp[j as usize].min(dp[(j - sq) as usize] + 1);
            }
        }
        dp[n as usize]
    }
}
