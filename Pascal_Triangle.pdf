Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]


Constraints:

1 <= numRows <= 30
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class pascalTriangle {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> pascaltriangle = new ArrayList<>();
        if(numRows <= 0) {
            return pascaltriangle;
        }
        pascaltriangle.add(new ArrayList<>());
        pascaltriangle.get(0).add(1);
        for(int i = 1; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();
            List<Integer> prevRow = pascaltriangle.get(i - 1);
            row.add(1);
            for(int j = 1; j < i; j++) {

                row.add(prevRow.get(j - 1) + prevRow.get(j));
            }
            row.add(1);
            pascaltriangle.add(row);
        }
        return pascaltriangle;
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-----=-=-
impl Solution {
    pub fn generate(num_rows: i32) -> Vec<Vec<i32>> {
        let mut pascal_triangle: Vec<Vec<i32>> = Vec::new();
        if num_rows <= 0 {
            return pascal_triangle;
        }
        pascal_triangle.push(vec![1]);
        for i in 1..num_rows {
            let mut row: Vec<i32> = Vec::new();
            let mut prev_row: &Vec<i32> = &pascal_triangle[i as usize - 1];
            row.push(1);
            for j in 1..i as usize {
                row.push(prev_row[j - 1] + prev_row[j]);
            }
            row.push(1);
            pascal_triangle.push(row);
        }
        pascal_triangle
    }
}
