Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8

Code:

class Generate_Parenthtesis {
    public List<String> generateParenthesis(int n) {

        List<String> res = new ArrayList<>();
        generateParenthesisHelper(n, 0, 0, "", res);

        return res;
        
    }
    private static void generateParenthesisHelper(int n, int open, int close, String current, List<String> res) {
        if(current.length() == 2 * n) {

            res.add(current);
            return;
        }

        if(open < n) {

            generateParenthesisHelper(n, open + 1, close, current + "(", res);
        }
        if(close < open) {
            
            generateParenthesisHelper(n, open, close + 1, current + ")", res);

        }
    }
}