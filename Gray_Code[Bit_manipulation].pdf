An n-bit gray code sequence is a sequence of 2n integers where:
Every integer is in the inclusive range [0, 2n - 1],
The first integer is 0,
An integer appears no more than once in the sequence,
The binary representation of every pair of adjacent integers differs by exactly one bit, and
The binary representation of the first and last integers differs by exactly one bit.
Given an integer n, return any valid n-bit gray code sequence.

Example 1:

Input: n = 2
Output: [0,1,3,2]

Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit

Example 2:

Input: n = 1
Output: [0,1]

Constraints:

1 <= n <= 16
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> gc = new ArrayList<>();
        for(int i = 0; i < 1 << n; i++) {
            gc.add(i ^ (i >> 1));
        }
        return gc;
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-----=-=-
impl Solution {
    pub fn gray_code(n: i32) -> Vec<i32> {
        let mut gc = Vec::new();
        for i in 0..(1 << n) {
            gc.push(i ^ (i >> 1));
        }
        gc
    }
}
//////////////////------------------------------------------------LOGIC------------------------------------///////////////////////////
Gray code is a type of encoding method that we often encounter in engineering. Its basic feature is that only one bit of binary number is different between any two adjacent codes.

The rule for converting binary code to binary Gray code is to keep the highest bit of the binary code as the highest bit of the Gray code, and the second highest bit of the Gray code is the XOR of the highest bit and the second highest bit of the binary code. The calculation of the remaining bits of the Gray code is similar to the second highest bit.

Assume that a binary number is represented as B(n - 1)B(n - 2)...B(2)B(1)B(0), and its Gray code is represented as G(n - 1)G(n - 2)...G(2)G(1)G(0). The highest bit is retained, so G(n - 1) = B(n - 1); and the other bits G(i) = B(i + 1) XOR B(i) , where i = 0, 1, 2, 3,...n-2.
Therefore, for an integer
x, we can use the function gray(x) to get its Gray code:

int gray(x) {
    return x ^ (x >> 1);
}
We directly map the integers [0,...(2.pow(n) - 1)] to the corresponding Gray codes to get the answer array.

The time complexity is O(2.pow(n)), where n is the integer given in the problem. Ignoring the space consumption of the answer, the space complexity is O(1).
