You are given a 0-indexed integer array nums, and you are allowed to traverse between its indices. You can traverse between index i and index j, i != j, if and only if gcd(nums[i], nums[j]) > 1, where gcd is the greatest common divisor.
Your task is to determine if for every pair of indices i and j in nums, where i < j, there exists a sequence of traversals that can take us from i to j.
Return true if it is possible to traverse between all such pairs of indices, or false otherwise.

Example 1:

Input: nums = [2,3,6]
Output: true
Explanation: In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).
To go from index 0 to index 1, we can use the sequence of traversals 0 -> 2 -> 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 > 1.
To go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 > 1.

Example 2:

Input: nums = [3,9,5]
Output: false
Explanation: No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.

Example 3:

Input: nums = [4,3,12,8]
Output: true
Explanation: There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105

--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
class Solution {
    List<List<Integer>> g = new ArrayList<>();

    public List<Integer> minPrime(int MAX) {
        List<Integer> min_prime = new ArrayList<>();
        for(int i = 0; i <= MAX; i++) {
            min_prime.add(i);
        }
        for(int i = 2; i * i <= MAX; i++) {
            if(min_prime.get(i) != i)
                continue;
            for(int j = i * i;j <= MAX; j += i)
                min_prime.set(j, Math.min(min_prime.get(j), i));
        }
        return min_prime;
    }
    public List<Integer> getPrimeFactorsinLogn(int n, List<Integer> min_prime) {
        List<Integer> prime_factors = new ArrayList<>();
        while(n > 1) {
            int smallest_prime_factor_of_n = min_prime.get(n);
            if(n % smallest_prime_factor_of_n == 0)
                prime_factors.add(smallest_prime_factor_of_n);
            while(n % smallest_prime_factor_of_n == 0)
                n /= smallest_prime_factor_of_n;
        }
        return prime_factors;
    }
    public void bfs(int src, List<Boolean> vis) {
        Queue<Integer> q = new LinkedList<>();
        q.add(src);
        vis.set(src, true);
        while(!q.isEmpty()) {
            int node = q.poll();
            for(int child: g.get(node)) {
                if(!vis.get(child)) {
                    q.add(child);
                    vis.set(child, true);
                }
            }
        }
    }
    public boolean canTraverseAllPairs(int[] nums) {
        int count_1 = 0;
        for(int num : nums) {
            if(num == 1)
                count_1++;
        }
        if(count_1 > 1 || (count_1 == 1 && nums.length > 1))
            return false;
        int max_elem = Arrays.stream(nums).max().getAsInt();
        List<Integer> min_prime = minPrime(max_elem + 1);
        for(int i = 0; i <= max_elem; i++) {
            g.add(new ArrayList<>());
        }
        List<Boolean> vis = new ArrayList<>(Collections.nCopies(max_elem + 1, false));
        for(int num : nums) {
            List<Integer> pf = getPrimeFactorsinLogn(num, min_prime);
            for(int prime : pf) {
                if(prime == num)
                    continue;
                g.get(prime).add(num);
                g.get(num).add(prime);
            }
        }
        bfs(nums[0], vis);
        for(int num : nums) {
            if(!vis.get(num))
                return false;
        }
        return true;
    }
}

--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
use std::collections::{HashMap, HashSet, VecDeque};
impl Solution {
    fn min_prime(MAX : usize) -> Vec<usize> {
        let mut min_prime = vec![0; MAX + 1];
        for i in 0..=MAX {
            min_prime[i] = i;
        }
        let mut i = 2;
        while i * i <= MAX {
            if min_prime[i] == i {
                let mut j = i * i;
                while j <= MAX {
                    if min_prime[j] > i {
                        min_prime[j] = i;
                    }
                    j += i;
                }
            }
            i += 1;
        }
        min_prime
    }
    fn get_prime_factors_in_logn(mut n : usize, min_prime : &[usize]) -> HashSet<usize> {
        let mut prime_factors = HashSet::new();
        while n > 1 {
            let smallest_prime_factor_of_n = min_prime[n];
            if n % smallest_prime_factor_of_n == 0 {
                prime_factors.insert(smallest_prime_factor_of_n);
            }
            while n % smallest_prime_factor_of_n == 0 {
                n /= smallest_prime_factor_of_n;
            }
        }
        prime_factors
    }
    fn bfs(src : usize, g : &HashMap<usize, Vec<i32>>, vis : &mut HashSet<usize>) {
        let mut q = VecDeque::new();
        q.push_back(src);
        vis.insert(src);
        while let Some(node) = q.pop_front() {
            if let Some(neighbors) = g.get(&node) {
                for &child in neighbors {
                    if !vis.contains(&((child) as usize)) {
                        q.push_back(child as usize);
                        vis.insert(child as usize);
                    }
                }
            }
        }
    }
    pub fn can_traverse_all_pairs(nums: Vec<i32>) -> bool {
        let mut count_1 = 0;
        for &num in &nums {
            if num == 1 {
                count_1 += 1;
            }
        }
        if count_1 > 1 || (count_1 == 1 && nums.len() > 1) {
            return false;
        }
        let max_elem = *nums.iter().max().unwrap();
        let mut g = HashMap::new();
        let min_prime = Self::min_prime((max_elem + 1) as usize);
        for &num in &nums {
            let pf = Self::get_prime_factors_in_logn(num as usize, &min_prime);
            for &prime in &pf {
                if prime == num as usize {
                    continue;
                }
                g.entry(prime).or_insert(Vec::new()).push(num);
                g.entry(num as usize).or_insert(Vec::new()).push(prime as i32);
            }
        }
        let mut vis = HashSet::new();
        Self::bfs(nums[0] as usize, &g, &mut vis);
        for &num in &nums {
            if !vis.contains(&(num as usize)) {
                return false;
            }
        }
        true
    }
}
