Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.
--------------------------------------------------------------------CODE--------------------------------------------------------------
in Java
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-=
class Solution {
    public String frequencySort(String s) {
        Map<Character, Integer> count_char = new HashMap<>();
        for(char ch : s.toCharArray())
            count_char.put(ch, count_char.getOrDefault(ch, 0) + 1);
        //Comparing the count of characters & Sorting....
        List<Map.Entry<Character, Integer>> sorted_chars = new ArrayList<>(count_char.entrySet());
        sorted_chars.sort((a, b) -> b.getValue().compareTo(a.getValue()));

        StringBuilder new_str = new StringBuilder();
        for(Map.Entry<Character, Integer> ent : sorted_chars) {
            char ch = ent.getKey();
            int count = ent.getValue();
            for(int i = 0; i < count; i++)
                new_str.append(ch);
        }
        return new_str.toString();
    }
}
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-
in Rust
--=-=-=-=-=-=-=-=-=-=-=-=-=-==--=--=--=-=--=--=-=-=--=--=-=-==--=--=-=--=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-----=-=-
use std::collections::HashMap;
impl Solution {
    pub fn frequency_sort(s: String) -> String {
        let mut count_char: HashMap<char, i32> = HashMap::new();
        for ch in s.chars() {
            *count_char.entry(ch).or_insert(0) += 1;
        }
        let mut sorted_chars: Vec<(char, i32)> = count_char.into_iter().collect();
        sorted_chars.sort_by(|a, b| b.1.cmp(&a.1));
        let mut new_str = String::new();
        for ent in sorted_chars {
            let ch = ent.0;
            let count = ent.1;
            for _ in 0..count {
                new_str.push(ch);
            }
        }
        new_str
    }
}
