Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
E
xample 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.



-----------------------------------------------------------------------------------------CODE--------------------------------------------------------------------
import java.util.*;


class Solution {
    public void sortColors(int[] nums) {

         if (nums == null || nums.length == 0) {
            return;
        }

        int max = nums[0];
        int min = nums[0];

        // Find the maximum and minimum values in the array
        for (int n : nums) {
            max = Math.max(max, n);
            min = Math.min(min, n);
        }

        int range = max - min + 1;

        int[] countArr = new int[range];

        // Count the occurrences of each element in the input array
        for (int n : nums) {
            countArr[n - min]++;
        }

        int index = 0;

        // Reconstruct the sorted array in-place
        for (int i = 0; i < range; i++) {
            while (countArr[i] > 0) {
                nums[index++] = i + min;
                countArr[i]--;
            }
        }
    }
}	

