Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
 

Constraints:

1 <= s.length <= 20
1 <= p.length <= 20
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.


-----------------------------------------------------------------------------------------CODE--------------------------------------------------------------------
import java.util.*;

import java.util.regex.*;
class Solution {
    public boolean isMatch(String s, String p) {

       return isMatchHelper(s, 0, p, 0);

    }
    private boolean isMatchHelper(String s, int sIndex, String p, int pIndex) {
	0
        if (pIndex == p.length()) {
            return sIndex == s.length();
        }

        if (pIndex < p.length() - 1 && p.charAt(pIndex + 1) == '*') {
            // Case 1: '*' is ignored (zero occurrences of the preceding character)
			
            if (isMatchHelper(s, sIndex, p, pIndex + 2)) {
                return true;
            }

            // Case 2: '*' is considered (one or more occurrences of the preceding character)
			
            while (sIndex < s.length() && (s.charAt(sIndex) == p.charAt(pIndex) || p.charAt(pIndex) == '.')) {
                if (isMatchHelper(s, sIndex + 1, p, pIndex + 2)) {
                    return true;
                }
                sIndex++;
            }
        } else if (sIndex < s.length() && (s.charAt(sIndex) == p.charAt(pIndex) || p.charAt(pIndex) == '.')) {
            return isMatchHelper(s, sIndex + 1, p, pIndex + 1);
        }

        return false;
		
		//Not optimized But does the most
		// return s.matches(p);
    }
}
